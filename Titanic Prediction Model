{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.14","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":9781424,"sourceType":"datasetVersion","datasetId":5992519}],"dockerImageVersionId":30786,"isInternetEnabled":false,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"from sklearn import svm, datasets\nfrom sklearn.linear_model import LogisticRegression, Lasso, RidgeClassifier\nfrom sklearn.model_selection import train_test_split, GridSearchCV, RandomizedSearchCV\nfrom sklearn.ensemble import RandomForestClassifier, AdaBoostClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom scipy.stats import randint\n\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.preprocessing import LabelEncoder, StandardScaler, OneHotEncoder\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.impute import SimpleImputer\nfrom sklearn import metrics\n\nimport re\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2024-11-01T21:28:42.327143Z","iopub.execute_input":"2024-11-01T21:28:42.328320Z","iopub.status.idle":"2024-11-01T21:28:42.338664Z","shell.execute_reply.started":"2024-11-01T21:28:42.328250Z","shell.execute_reply":"2024-11-01T21:28:42.337456Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Load training and test data.\ntrain_data = pd.read_csv(\"/kaggle/input/titanic/train.csv\")\ntest_data = pd.read_csv(\"/kaggle/input/titanic/test.csv\")","metadata":{"execution":{"iopub.status.busy":"2024-11-01T21:28:42.341485Z","iopub.execute_input":"2024-11-01T21:28:42.341867Z","iopub.status.idle":"2024-11-01T21:28:42.360171Z","shell.execute_reply.started":"2024-11-01T21:28:42.341825Z","shell.execute_reply":"2024-11-01T21:28:42.358682Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"#Feature Engineering; after EDA, extract title from feature 'name', and created new feature.\ndef extract_title(name):\n    title_search = re.search(' ([A-Za-z]+)\\.', name)\n    if title_search:\n        return title_search.group(1)\n    return ''\ntrain_data['Title'] = train_data['Name'].apply(extract_title)\ntest_data['Title'] = test_data['Name'].apply(extract_title)\ntitle_mapping = {\n    'Capt': 'Officer', 'Col': 'Officer', 'Major': 'Officer', \n    'Dr': 'Rare', 'Rev': 'Rare', 'Don': 'Rare', 'Sir': 'Noble', \n    'Mme': 'Mrs', 'Mlle': 'Miss', 'Ms': 'Miss', 'Lady': 'Noble',\n    'Jonkheer': 'Noble', 'Mr': 'Mr', 'Mrs': 'Mrs', 'Miss': 'Miss', 'Master': 'Master'\n}\n\ntrain_data['Title'] = train_data['Title'].map(title_mapping)\ntest_data['Title'] = test_data['Title'].map(title_mapping)\n\n","metadata":{"execution":{"iopub.status.busy":"2024-11-01T21:28:42.372143Z","iopub.execute_input":"2024-11-01T21:28:42.373038Z","iopub.status.idle":"2024-11-01T21:28:42.390467Z","shell.execute_reply.started":"2024-11-01T21:28:42.372980Z","shell.execute_reply":"2024-11-01T21:28:42.389292Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"#Separated categorical and numerical values.\ny = train_data.Survived\nX = train_data.drop(columns=['Survived','PassengerId','Name','Ticket','Cabin'])\nX_test = test_data.drop(columns=['PassengerId','Name','Ticket','Cabin'])\nnum_cols = X.select_dtypes(include=np.number).columns\ncat_cols = X.select_dtypes(include=['object']).columns","metadata":{"execution":{"iopub.status.busy":"2024-11-01T21:28:42.394622Z","iopub.execute_input":"2024-11-01T21:28:42.395359Z","iopub.status.idle":"2024-11-01T21:28:42.407605Z","shell.execute_reply.started":"2024-11-01T21:28:42.395298Z","shell.execute_reply":"2024-11-01T21:28:42.406076Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"#Preprocessed variables\nfor i in range(1000):\n    X.loc[np.random.choice(X.index),np.random.choice(X.columns)] = np.nan\n\nx_train, x_test, y_train, y_test = train_test_split(X,y, random_state=0, test_size=0.25)\n\ncat_vals = Pipeline([(\"imputer\",SimpleImputer(strategy='most_frequent')), (\"ohe\",OneHotEncoder(sparse_output = False, drop='first', handle_unknown='ignore'))])\nnum_vals = Pipeline([(\"imputer\",SimpleImputer(strategy='mean')), (\"scale\",StandardScaler())])\n\npreprocess = ColumnTransformer(\n    transformers=[\n        (\"cat_preprocess\", cat_vals, cat_cols),\n        (\"num_preprocess\", num_vals, num_cols)\n    ]\n)","metadata":{"execution":{"iopub.status.busy":"2024-11-01T21:28:42.409277Z","iopub.execute_input":"2024-11-01T21:28:42.409782Z","iopub.status.idle":"2024-11-01T21:28:42.774509Z","shell.execute_reply.started":"2024-11-01T21:28:42.409729Z","shell.execute_reply":"2024-11-01T21:28:42.773405Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"#Created a range of 400 evenly spaced values between 1 and 200 for alpha in certain regression models.\nalpha_range = np.linspace(1, 200, num=400)","metadata":{"execution":{"iopub.status.busy":"2024-11-01T21:28:42.776036Z","iopub.execute_input":"2024-11-01T21:28:42.776561Z","iopub.status.idle":"2024-11-01T21:28:42.783506Z","shell.execute_reply.started":"2024-11-01T21:28:42.776502Z","shell.execute_reply":"2024-11-01T21:28:42.781484Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"#For practice, created robust Pipeline using various models and hyperparameters as a search space.\n\npipeline = Pipeline([(\"preprocess\",preprocess), \n                     (\"regr\",LogisticRegression())])\nsearch_space = [{'regr': [LogisticRegression(solver='liblinear',max_iter=2000)], 'regr__penalty': ['l1', 'l2'], 'regr__C': [0.01,0.1,1,10,100], 'regr__fit_intercept': [True,False]},\n                {'regr':[RidgeClassifier()],\n                     'regr__alpha': alpha_range},\n               {'regr': [RandomForestClassifier()], \n                 'regr__n_estimators': [50, 100, 200], \n                 'regr__max_depth': [None, 10, 20, 30, 50, 70], \n                 'regr__min_samples_split': [2, 5, 10], \n                 'regr__min_samples_leaf': [1, 2, 4],\n                 'regr__bootstrap': [True, False]}, \n                {'regr': [AdaBoostClassifier(estimator=DecisionTreeClassifier(max_depth=1))], \n                 'regr__n_estimators': [50, 100, 200],\n                 'regr__learning_rate': [0.01, 0.1, 1, 10]}]","metadata":{"execution":{"iopub.status.busy":"2024-11-01T21:28:42.785832Z","iopub.execute_input":"2024-11-01T21:28:42.786454Z","iopub.status.idle":"2024-11-01T21:28:42.797849Z","shell.execute_reply.started":"2024-11-01T21:28:42.786395Z","shell.execute_reply":"2024-11-01T21:28:42.796564Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"gs = GridSearchCV(pipeline, search_space, scoring='accuracy', cv=5)\n","metadata":{"execution":{"iopub.status.busy":"2024-11-01T21:28:42.799287Z","iopub.execute_input":"2024-11-01T21:28:42.799708Z","iopub.status.idle":"2024-11-01T21:28:42.810328Z","shell.execute_reply.started":"2024-11-01T21:28:42.799667Z","shell.execute_reply":"2024-11-01T21:28:42.808950Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"gs.fit(x_train, y_train)","metadata":{"execution":{"iopub.status.busy":"2024-11-01T21:28:42.811910Z","iopub.execute_input":"2024-11-01T21:28:42.812435Z","iopub.status.idle":"2024-11-01T21:38:07.014479Z","shell.execute_reply.started":"2024-11-01T21:28:42.812354Z","shell.execute_reply":"2024-11-01T21:38:07.012988Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"best_pipeline = gs.best_estimator_","metadata":{"execution":{"iopub.status.busy":"2024-11-01T21:38:07.015945Z","iopub.execute_input":"2024-11-01T21:38:07.016434Z","iopub.status.idle":"2024-11-01T21:38:07.021621Z","shell.execute_reply.started":"2024-11-01T21:38:07.016359Z","shell.execute_reply":"2024-11-01T21:38:07.020534Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"best_regression_model = best_pipeline.named_steps['regr']\nprint('The best regression model is:')\nprint(best_regression_model)","metadata":{"execution":{"iopub.status.busy":"2024-11-01T21:38:07.023325Z","iopub.execute_input":"2024-11-01T21:38:07.023904Z","iopub.status.idle":"2024-11-01T21:38:07.038734Z","shell.execute_reply.started":"2024-11-01T21:38:07.023848Z","shell.execute_reply":"2024-11-01T21:38:07.037411Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"best_model_hyperparameters = best_regression_model.get_params()\nprint('The hyperparameters of the regression model are:')\nprint(best_model_hyperparameters)","metadata":{"execution":{"iopub.status.busy":"2024-11-01T21:38:07.040296Z","iopub.execute_input":"2024-11-01T21:38:07.040814Z","iopub.status.idle":"2024-11-01T21:38:07.058718Z","shell.execute_reply.started":"2024-11-01T21:38:07.040763Z","shell.execute_reply":"2024-11-01T21:38:07.057188Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"score_model = best_pipeline.score(x_test,y_test)\nprint('The score:')\nprint(score_model)","metadata":{"execution":{"iopub.status.busy":"2024-11-01T21:38:07.063795Z","iopub.execute_input":"2024-11-01T21:38:07.064294Z","iopub.status.idle":"2024-11-01T21:38:07.099715Z","shell.execute_reply.started":"2024-11-01T21:38:07.064243Z","shell.execute_reply":"2024-11-01T21:38:07.098019Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"predictions = best_pipeline.predict(X_test)","metadata":{"execution":{"iopub.status.busy":"2024-11-01T21:38:07.101190Z","iopub.execute_input":"2024-11-01T21:38:07.101606Z","iopub.status.idle":"2024-11-01T21:38:07.132897Z","shell.execute_reply.started":"2024-11-01T21:38:07.101565Z","shell.execute_reply":"2024-11-01T21:38:07.131710Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"output = pd.DataFrame({'PassengerId': test_data.PassengerId, 'Survived': predictions})\noutput.to_csv('submission.csv', index=False)\nprint(\"Your submission was successfully saved!\")","metadata":{"execution":{"iopub.status.busy":"2024-11-01T21:38:07.134500Z","iopub.execute_input":"2024-11-01T21:38:07.134897Z","iopub.status.idle":"2024-11-01T21:38:07.145506Z","shell.execute_reply.started":"2024-11-01T21:38:07.134852Z","shell.execute_reply":"2024-11-01T21:38:07.144163Z"},"trusted":true},"execution_count":null,"outputs":[]}]}